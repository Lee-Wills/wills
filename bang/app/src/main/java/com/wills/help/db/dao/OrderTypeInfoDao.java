package com.wills.help.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wills.help.db.bean.OrderTypeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_TYPE_INFO".
*/
public class OrderTypeInfoDao extends AbstractDao<OrderTypeInfo, String> {

    public static final String TABLENAME = "ORDER_TYPE_INFO";

    /**
     * Properties of entity OrderTypeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Typeid = new Property(0, String.class, "typeid", true, "TYPEID");
        public final static Property Ordertype = new Property(1, String.class, "ordertype", false, "ORDERTYPE");
        public final static Property Showing = new Property(2, int.class, "showing", false, "SHOWING");
    }


    public OrderTypeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public OrderTypeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_TYPE_INFO\" (" + //
                "\"TYPEID\" TEXT PRIMARY KEY NOT NULL ," + // 0: typeid
                "\"ORDERTYPE\" TEXT," + // 1: ordertype
                "\"SHOWING\" INTEGER NOT NULL );"); // 2: showing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_TYPE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderTypeInfo entity) {
        stmt.clearBindings();
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(1, typeid);
        }
 
        String ordertype = entity.getOrdertype();
        if (ordertype != null) {
            stmt.bindString(2, ordertype);
        }
        stmt.bindLong(3, entity.getShowing());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderTypeInfo entity) {
        stmt.clearBindings();
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(1, typeid);
        }
 
        String ordertype = entity.getOrdertype();
        if (ordertype != null) {
            stmt.bindString(2, ordertype);
        }
        stmt.bindLong(3, entity.getShowing());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OrderTypeInfo readEntity(Cursor cursor, int offset) {
        OrderTypeInfo entity = new OrderTypeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // typeid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ordertype
            cursor.getInt(offset + 2) // showing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderTypeInfo entity, int offset) {
        entity.setTypeid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrdertype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShowing(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OrderTypeInfo entity, long rowId) {
        return entity.getTypeid();
    }
    
    @Override
    public String getKey(OrderTypeInfo entity) {
        if(entity != null) {
            return entity.getTypeid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderTypeInfo entity) {
        return entity.getTypeid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
