package com.wills.help.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wills.help.db.bean.PointInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_INFO".
*/
public class PointInfoDao extends AbstractDao<PointInfo, String> {

    public static final String TABLENAME = "POINT_INFO";

    /**
     * Properties of entity PointInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Posid = new Property(0, String.class, "posid", true, "POSID");
        public final static Property Blockid = new Property(1, String.class, "blockid", false, "BLOCKID");
        public final static Property Posname = new Property(2, String.class, "posname", false, "POSNAME");
    }


    public PointInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PointInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_INFO\" (" + //
                "\"POSID\" TEXT PRIMARY KEY NOT NULL ," + // 0: posid
                "\"BLOCKID\" TEXT," + // 1: blockid
                "\"POSNAME\" TEXT);"); // 2: posname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointInfo entity) {
        stmt.clearBindings();
 
        String posid = entity.getPosid();
        if (posid != null) {
            stmt.bindString(1, posid);
        }
 
        String blockid = entity.getBlockid();
        if (blockid != null) {
            stmt.bindString(2, blockid);
        }
 
        String posname = entity.getPosname();
        if (posname != null) {
            stmt.bindString(3, posname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointInfo entity) {
        stmt.clearBindings();
 
        String posid = entity.getPosid();
        if (posid != null) {
            stmt.bindString(1, posid);
        }
 
        String blockid = entity.getBlockid();
        if (blockid != null) {
            stmt.bindString(2, blockid);
        }
 
        String posname = entity.getPosname();
        if (posname != null) {
            stmt.bindString(3, posname);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PointInfo readEntity(Cursor cursor, int offset) {
        PointInfo entity = new PointInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // posid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // blockid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // posname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointInfo entity, int offset) {
        entity.setPosid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBlockid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PointInfo entity, long rowId) {
        return entity.getPosid();
    }
    
    @Override
    public String getKey(PointInfo entity) {
        if(entity != null) {
            return entity.getPosid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointInfo entity) {
        return entity.getPosid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
