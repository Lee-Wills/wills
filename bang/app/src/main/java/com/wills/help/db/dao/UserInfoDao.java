package com.wills.help.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wills.help.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Phone_num = new Property(2, String.class, "phone_num", false, "PHONE_NUM");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Realname = new Property(6, String.class, "realname", false, "REALNAME");
        public final static Property School_num = new Property(7, String.class, "school_num", false, "SCHOOL_NUM");
        public final static Property Classname = new Property(8, String.class, "classname", false, "CLASSNAME");
        public final static Property Usertype = new Property(9, String.class, "usertype", false, "USERTYPE");
        public final static Property Typename = new Property(10, String.class, "typename", false, "TYPENAME");
        public final static Property Usergroup = new Property(11, String.class, "usergroup", false, "USERGROUP");
        public final static Property Authid = new Property(12, String.class, "authid", false, "AUTHID");
        public final static Property Createtime = new Property(13, String.class, "createtime", false, "CREATETIME");
        public final static Property School = new Property(14, String.class, "school", false, "SCHOOL");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "\"USERNAME\" TEXT," + // 1: username
                "\"PHONE_NUM\" TEXT," + // 2: phone_num
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"SEX\" TEXT," + // 4: sex
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"REALNAME\" TEXT," + // 6: realname
                "\"SCHOOL_NUM\" TEXT," + // 7: school_num
                "\"CLASSNAME\" TEXT," + // 8: classname
                "\"USERTYPE\" TEXT," + // 9: usertype
                "\"TYPENAME\" TEXT," + // 10: typename
                "\"USERGROUP\" TEXT," + // 11: usergroup
                "\"AUTHID\" TEXT," + // 12: authid
                "\"CREATETIME\" TEXT," + // 13: createtime
                "\"SCHOOL\" TEXT);"); // 14: school
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(3, phone_num);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(7, realname);
        }
 
        String school_num = entity.getSchool_num();
        if (school_num != null) {
            stmt.bindString(8, school_num);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String usertype = entity.getUsertype();
        if (usertype != null) {
            stmt.bindString(10, usertype);
        }
 
        String typename = entity.getTypename();
        if (typename != null) {
            stmt.bindString(11, typename);
        }
 
        String usergroup = entity.getUsergroup();
        if (usergroup != null) {
            stmt.bindString(12, usergroup);
        }
 
        String authid = entity.getAuthid();
        if (authid != null) {
            stmt.bindString(13, authid);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(14, createtime);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(15, school);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(3, phone_num);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(7, realname);
        }
 
        String school_num = entity.getSchool_num();
        if (school_num != null) {
            stmt.bindString(8, school_num);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String usertype = entity.getUsertype();
        if (usertype != null) {
            stmt.bindString(10, usertype);
        }
 
        String typename = entity.getTypename();
        if (typename != null) {
            stmt.bindString(11, typename);
        }
 
        String usergroup = entity.getUsergroup();
        if (usergroup != null) {
            stmt.bindString(12, usergroup);
        }
 
        String authid = entity.getAuthid();
        if (authid != null) {
            stmt.bindString(13, authid);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(14, createtime);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(15, school);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // realname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // school_num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // usertype
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // typename
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // usergroup
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // authid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createtime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // school
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRealname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSchool_num(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUsertype(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTypename(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUsergroup(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAuthid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatetime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSchool(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
